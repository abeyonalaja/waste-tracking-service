auth {
  mode: oauth2
}

auth:oauth2 {
  grant_type: client_credentials
  access_token_url: {{authBaseUrl}}/oauth2/token
  refresh_token_url: 
  client_id: {{clientId}}
  client_secret: {{clientSecret}}
  scope: 
  credentials_placement: basic_auth_header
  credentials_id: access_token
  token_placement: header
  token_header_prefix: Bearer
  auto_fetch_token: true
  auto_refresh_token: false
}

docs {
  # Digital Waste Tracking External API - Bruno Collection

  ## Overview

  This Bruno collection provides comprehensive testing for the Digital Waste Tracking External API. It includes test scenarios for creating, updating, and managing waste movements with various configurations including hazardous waste, POPs indicators, and different EWC code scenarios.

  ## üöÄ Quick Start

  ### Prerequisites
  - **Bruno App**: Download and install [Bruno](https://www.usebruno.com/) for API testing
  - **API Access**: Valid OAuth2 client credentials for the Digital Waste Tracking API
  - **Site ID**: Your valid receiving site ID for testing

  ### Setup
  1. **Import the Collection**: Open Bruno and import this collection folder
  2. **Configure Environment**: Select either `dev-environment`, `test-environment`, `perf-test-environment`, `ext-test-environment`, or `prod-environment`
  3. **Set Environment Secrets**: Configure the following secret variables in your selected environment:
     - `clientId`: Your OAuth2 client ID
     - `clientSecret`: Your OAuth2 client secret  
     - `organisationApiId`: Your valid organisation API ID for testing
  4. **Set Authentication**: Configure OAuth2 authentication (see Authentication section below)

  ## üîê Authentication

  The Digital Waste Tracking API uses OAuth2 client credentials flow. This collection provides two authentication options:

  ### Option 1: Inherited OAuth Configuration (Recommended)
  **Default behavior**: Each request inherits OAuth2 configuration from the collection level.
  
  **How it works**:
  - OAuth2 is configured once at the collection level
  - All requests automatically use the inherited authentication
  - No need to manually handle tokens in individual requests
  - Bruno manages token refresh automatically

  **Setup**:
  1. Configure OAuth2 in the collection settings
  2. Set Grant Type to `client_credentials`
  3. Provide your Client ID and Client Secret
  4. Set Token URL to your Cognito domain (e.g., `https://your-domain.auth.region.amazoncognito.com/oauth2/token`)
  5. Set Scope to `waste-movement:write`

  ### Option 2: Manual OAuth Token Generation
  **Alternative approach**: Use the dedicated OAuth request to generate tokens manually.
  
  **How it works**:
  - Run the OAuth request to generate an access token
  - Token is stored in the `{{ManuallyObtainedAccessToken}}` variable
  - Turn off OAuth inheritance in individual requests
  - Manually add `Authorization: Bearer {{ManuallyObtainedAccessToken}}` header
  - **Important**: You must manually tick to include this variable in each request

  **Setup**:
  1. Run the OAuth request to generate a token
  2. In each request where you want to use the manual token:
     - Turn off OAuth inheritance
     - Add `Authorization: Bearer {{ManuallyObtainedAccessToken}}` header
     - Ensure the `{{ManuallyObtainedAccessToken}}` variable is included

  ## üìÅ Collection Structure

  The collection is organized using a logical pattern that groups related functionality:

  ### **Action-Based Organization**
  Each major action (like creating or updating waste movements) has its own top-level folder containing all related test scenarios.

  ### **Expectation-Based Grouping**
  Within each action folder, requests are organized by expected outcomes:
  - **Success Scenarios**: Requests that should complete successfully
  - **Warning Scenarios**: Requests that succeed but generate validation warnings
  - **Error Scenarios**: Requests that are expected to fail with specific error conditions

  ### **Request Implementation**
  Each expectation group contains the actual Bruno requests that demonstrate that particular scenario, with appropriate request bodies, headers, and validation.

  This structure makes it easy to:
  - Find the right test scenario for your needs
  - Understand what each request is testing
  - Locate examples of specific error conditions
  - Follow the logical flow from action to outcome to implementation

  ## üîß Environment Configuration

  ### Available Environments
  - **`dev-environment`**: Development environment for testing
  - **`test-environment`**: Test environment for integration testing
  - **`perf-test-environment`**: Performance testing environment
  - **`ext-test-environment`**: External testing environment
  - **`prod-environment`**: Production environment (use with caution)

  ### Environment Variables
  Each environment defines:
  - `baseUrl`: The base URL for the API endpoints
  - `authBaseUrl`: The Cognito authentication endpoint

  ### Environment Secrets
  Each environment includes secret variables that need to be configured:
  - `clientId`: Your OAuth2 client ID for authentication
  - `clientSecret`: Your OAuth2 client secret for authentication
  - `organisationApiId`: Your valid organisation API ID for testing waste movements

  ### Setting Up Environment Secrets
  1. **Select Environment**: Choose your target environment in Bruno
  2. **Configure Secrets**: Right-click on the environment and select "Edit"
  3. **Set Values**: Enter your actual values for each secret variable
  4. **Save**: The secrets will be stored securely and used by all requests in that environment

  **Note**: The `organisationApiId` is automatically used in all request bodies, so you don't need to manually update individual requests.

  ## üìä Expected Response Codes

  | Scenario | Expected Status | Description |
  |-----------|----------------|-------------|
  | **Success** | 201 Created | Movement created/updated successfully |
  | **Validation Error** | 400 Bad Request | Missing or invalid data |
  | **Authentication Error** | 401 Unauthorized | Invalid or missing OAuth token |
  | **Authorization Error** | 403 Forbidden | Site access denied |
  | **Not Found** | 404 Not Found | Movement ID not found |

  ## üîÑ Pre-request Scripts

  Many requests include pre-request scripts that automatically:
  - **Generate Timestamps**: Set current date/time for `dateTimeReceived`
  - **Update Variables**: Set dynamic values like `{{timestamp}}`
  - **Validate Data**: Ensure required fields are present

  ### Example Pre-request Script
  ```javascript
  script:pre-request {
    const now = new Date();
    bru.setVar('timestamp', now.toISOString());
  }
  ```

  ## üìã Response Variables

  Some requests capture response data for use in subsequent requests:
  ```javascript
  vars:post-response {
    globalMovementId: res.body.globalMovementId
  }
  ```
  This allows you to use `{{globalMovementId}}` in update requests.

  ## üö® Common Issues & Solutions

  ### 1. Authentication Errors (401)
  **Problem**: Getting 401 Unauthorized responses
  
  **For Inherited OAuth**:
  - Verify OAuth2 configuration in collection settings
  - Check that client ID and secret are correct
  - Ensure scope includes `waste-movement:write`
  - Verify token URL is correct
  
  **For Manual OAuth**:
  - Check that `{{ManuallyObtainedAccessToken}}` variable is set
  - Ensure the variable is included in the request
  - Verify token hasn't expired
  - Regenerate token if needed

  ### 2. Site Validation Errors (403)
  **Problem**: Getting 403 Forbidden responses
  **Solution**:
  - Verify you're using your own site ID
  - Check that your account has access to the specified site
  - Ensure the site ID format is correct (UUID format)

  ### 3. Validation Errors (400)
  **Problem**: Getting 400 Bad Request responses
  **Solution**:
  - Check that all required fields are present
  - Verify EWC codes are in correct format
  - Ensure quantities and dates are valid
  - Check that hazardous waste has proper component data

  ### 4. Missing Movement ID
  **Problem**: Update requests failing with 404
  **Solution**:
  - Ensure you've created a movement first
  - Check that the `globalMovementId` variable is set correctly
  - Verify the movement ID format is correct

  ### 5. OAuth Variable Not Found
  **Problem**: `{{ManuallyObtainedAccessToken}}` variable not available
  **Solution**:
  - Run the OAuth request first to generate a token
  - Check that the variable is properly captured in the response
  - Ensure the variable name matches exactly
  - Verify the variable is included in subsequent requests

  ## üìö Additional Resources

  - **API Documentation**: Official OAS API specification and definitions for each field
  - **Business Rules**: Outlining the business rules associated with fields and their dependencies

  ## ü§ù Getting Help

  For questions about:
  - **API Integration and Usage**: Refer to this documentation and the additional resources above
  - **Technical Issues**: Contact the Digital Waste Tracking team

  ---

  **Last Updated**: January 2025  
  **API Version**: Digital Waste Tracking External API v1  
  **Bruno Version**: Compatible with Bruno +
}
